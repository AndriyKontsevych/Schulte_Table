{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["levels","size","numbers","extraTime","style","sizes","Math","sqrt","width","height","fontSize","App","props","state","seconds","count","level","isStart","handleClickSquere","bind","handleClick","handleReset","this","setState","interval","setInterval","tick","clearInterval","number","floor","random","includes","push","length","randomize","e","preventDefault","Number","target","id","className","onClick","visibility","display","map","num","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a526ac60.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport \"./index.css\";\n\nconst levels = [4, 9, 16, 25];\nlet size = 0;\nlet numbers = [];\nlet extraTime = 0;\n\nfunction randomize() {\n  let numbers = [];\n  let number = 0;\n\n  do {\n    number = Math.floor(Math.random() * (size + 1));\n\n    if (number && !numbers.includes(number)) {\n      numbers.push(number);\n    }\n  } while (numbers.length !== size);\n\n  return numbers;\n}\n\nfunction style() {\n  let sizes = 500 / Math.sqrt(size) - 2;\n  return {\n    width: sizes + \"px\",\n    height: sizes + \"px\",\n    fontSize: 1000 / size + \"px\"\n  };\n}\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      seconds: 0,\n      count: 1,\n      level: 0,\n      isStart: false\n    };\n    this.handleClickSquere = this.handleClickSquere.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n  }\n\n  tick() {\n    this.setState(state => ({\n      seconds: state.seconds - 1\n    }));\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      if (this.state.isStart) {\n        this.tick();\n        if (this.state.seconds === 0) {\n          numbers = [];\n          extraTime = 0;\n          this.setState(state => ({\n            count: (state.count = 1),\n            seconds: 0,\n            isStart: false,\n            level: (state.level = 0)\n          }));\n        }\n      }\n    }, 750);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  handleClick() {\n    this.setState(state => ({\n      count: (state.count = 1),\n      isStart: !state.isStart,\n      seconds: size + extraTime\n    }));\n    size = levels[this.state.level];\n    numbers = randomize();\n  }\n\n  handleReset() {\n    this.setState(state => ({\n      count: (state.count = 1),\n      seconds: 0,\n      isStart: false,\n      level: (state.level = 0)\n    }));\n    size = levels[this.state.level];\n    numbers = [];\n    extraTime = 0;\n  }\n\n  handleClickSquere(e) {\n    e.preventDefault();\n    let count = this.state.count;\n    if (Number(e.target.id) === count) {\n      this.setState(() => ({\n        count: this.state.count + 1\n      }));\n\n      if (this.state.count === size) {\n        if (this.state.level === levels.length - 1) {\n          this.setState(state => ({\n            isStart: !state.isStart,\n            level: (state.level = 0)\n          }));\n          extraTime = 0;\n        } else {\n          this.setState(state => ({\n            isStart: !state.isStart,\n            level: state.level + 1\n          }));\n          extraTime = this.state.seconds;\n        }\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"timer\">\n          <h1>{this.state.seconds}</h1>\n        </div>\n        <div className=\"game\">\n          <div\n            className=\"gameBtn\"\n            onClick={this.handleClick}\n            style={\n              this.state.isStart\n                ? { visibility: \"hidden\" }\n                : { visibility: \"visible\" }\n            }\n          >\n            {this.state.level === 0 ? \"Start\" : \"Next\"}\n\n            <div\n              className=\"extraTime\"\n              style={\n                this.state.level < 1\n                  ? { display: \"none\" }\n                  : { display: \"inline\" }\n              }\n            >\n              +{extraTime} extra time\n            </div>\n          </div>\n          {numbers.map(num => {\n            return (\n              <div\n                className={num < this.state.count ? `square green` : `square`}\n                key={num}\n                id={num}\n                onClick={this.handleClickSquere}\n                style={style(this.props.size)}\n              >\n                {num}\n              </div>\n            );\n          })}\n        </div>\n        <button className=\"reset\" onClick={this.handleReset}>\n          Restart\n        </button>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}